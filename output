static int	check_north(t_game_data *g_d, t_fpoint new_pos)
{
	int	i;
	int	j;
	int istart;
	int jstart;
	int jend;

	// check left for wich is more
	jstart = (int)(fto_pos(new_pos.y - (g_d->player->size.y / 2)));
	jend = (int)(fto_pos(new_pos.y + (g_d->player->size.y / 2)));
	istart = (int)(fto_pos(new_pos.x - (g_d->player->size.x / 2)));
	i = istart;
	while (i < (int)(new_pos.x))
	{
		j = jstart + i - istart;
		while (j < jend - i + istart)
		{
			
			j++;
		}
		i++;
	}
	// check right for wich is more
	return (0);
}

static int	*is_collsion(t_game_data *g_d, t_fpoint new_pos)
{
	int *collisions;

	collisions = (int *)ft_calloc(4, sizeof(int));
	collisions[NORTH] = check_north(g_d, new_pos);
	collisions[EAST] = check_east(g_d, new_pos);
	collisions[SOUTH] = check_south(g_d, new_pos);
	collisions[WEST] = check_west(g_d, new_pos);
	return (collisions);
}